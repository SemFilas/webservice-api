// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webservice_api.repositories;

#nullable disable

namespace webservice_api.Migrations
{
    [DbContext(typeof(SemFilasContext))]
    [Migration("20230413025436_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("webservice_api.model.Acesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioResponsavel");

                    b.ToTable("Acessos");
                });

            modelBuilder.Entity("webservice_api.model.AcessosGrupo", b =>
                {
                    b.Property<int>("AcessosId")
                        .HasColumnType("int")
                        .HasColumnName("acessosId");

                    b.Property<int>("GruposId")
                        .HasColumnType("int")
                        .HasColumnName("gruposId");

                    b.Property<DateTime?>("DataLancamento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataLancamento");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("AcessosId", "GruposId");

                    b.HasIndex("GruposId");

                    b.HasIndex("UsuarioResponsavel");

                    b.ToTable("AcessosGrupos");
                });

            modelBuilder.Entity("webservice_api.model.AcessosUsuario", b =>
                {
                    b.Property<int>("AcessosId")
                        .HasColumnType("int")
                        .HasColumnName("acessosId");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int")
                        .HasColumnName("usuariosId");

                    b.Property<DateTime?>("DataLancamento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataLancamento");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("AcessosId", "UsuariosId");

                    b.HasIndex("UsuarioResponsavel");

                    b.HasIndex("UsuariosId");

                    b.ToTable("AcessosUsuarios");
                });

            modelBuilder.Entity("webservice_api.model.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("webservice_api.model.CategoriasProduto", b =>
                {
                    b.Property<int>("ProdutosId")
                        .HasColumnType("int")
                        .HasColumnName("produtosId");

                    b.Property<int>("CategoriasId")
                        .HasColumnType("int")
                        .HasColumnName("categoriasId");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("ProdutosId", "CategoriasId");

                    b.HasIndex("CategoriasId");

                    b.HasIndex("UsuarioResponsavel");

                    b.ToTable("CategoriasProdutos");
                });

            modelBuilder.Entity("webservice_api.model.EntradaEstoque", b =>
                {
                    b.Property<int>("ProdutosId")
                        .HasColumnType("int")
                        .HasColumnName("produtosId");

                    b.Property<int>("EstoqueId")
                        .HasColumnType("int")
                        .HasColumnName("estoqueId");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataEntrada")
                        .HasColumnType("datetime")
                        .HasColumnName("dataEntrada");

                    b.Property<decimal?>("Quantidade")
                        .HasColumnType("decimal(10, 4)")
                        .HasColumnName("quantidade");

                    b.Property<int?>("UnidadesId")
                        .HasColumnType("int")
                        .HasColumnName("unidadesId");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("ProdutosId", "EstoqueId", "Id");

                    b.HasIndex("UnidadesId");

                    b.HasIndex("UsuarioResponsavel");

                    b.ToTable("EntradaEstoque", (string)null);
                });

            modelBuilder.Entity("webservice_api.model.Estagio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<string>("EstagioPadrao")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("estagioPadrao")
                        .IsFixedLength();

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<int?>("ProximoEstagio")
                        .HasColumnType("int")
                        .HasColumnName("proximoEstagio");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("Id");

                    b.ToTable("Estagios");
                });

            modelBuilder.Entity("webservice_api.model.EstagiosPedido", b =>
                {
                    b.Property<short>("PedidosAno")
                        .HasColumnType("smallint")
                        .HasColumnName("pedidosAno");

                    b.Property<int>("PedidosId")
                        .HasColumnType("int")
                        .HasColumnName("pedidosId");

                    b.Property<int>("EstagiosId")
                        .HasColumnType("int")
                        .HasColumnName("estagiosId");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataLancamento");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("PedidosAno", "PedidosId", "EstagiosId", "DataLancamento");

                    b.HasIndex("EstagiosId");

                    b.HasIndex("UsuarioResponsavel");

                    b.ToTable("EstagiosPedido", (string)null);
                });

            modelBuilder.Entity("webservice_api.model.Estoque", b =>
                {
                    b.Property<int>("ProdutosId")
                        .HasColumnType("int")
                        .HasColumnName("produtosId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Saldo")
                        .HasColumnType("decimal(10, 4)")
                        .HasColumnName("saldo");

                    b.Property<int?>("UnidadesId")
                        .HasColumnType("int")
                        .HasColumnName("unidadesId");

                    b.HasKey("ProdutosId", "Id");

                    b.HasIndex("UnidadesId");

                    b.ToTable("Estoque", (string)null);
                });

            modelBuilder.Entity("webservice_api.model.FormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("Id");

                    b.ToTable("FormaPagamento", (string)null);
                });

            modelBuilder.Entity("webservice_api.model.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioResponsavel");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("webservice_api.model.GruposUsuario", b =>
                {
                    b.Property<int>("GruposId")
                        .HasColumnType("int")
                        .HasColumnName("gruposId");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int")
                        .HasColumnName("usuariosId");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("GruposId", "UsuariosId");

                    b.HasIndex("UsuarioResponsavel");

                    b.HasIndex("UsuariosId");

                    b.ToTable("GruposUsuarios");
                });

            modelBuilder.Entity("webservice_api.model.ItensPedido", b =>
                {
                    b.Property<short>("PedidosAno")
                        .HasColumnType("smallint")
                        .HasColumnName("pedidosAno");

                    b.Property<int>("PedidosId")
                        .HasColumnType("int")
                        .HasColumnName("pedidosId");

                    b.Property<int>("ProdutosId")
                        .HasColumnType("int")
                        .HasColumnName("produtosId");

                    b.Property<decimal?>("PrecoProduto")
                        .HasColumnType("decimal(10, 5)")
                        .HasColumnName("precoProduto");

                    b.Property<decimal?>("Quantidade")
                        .HasColumnType("decimal(10, 4)")
                        .HasColumnName("quantidade");

                    b.Property<int?>("UnidadesId")
                        .HasColumnType("int")
                        .HasColumnName("unidadesId");

                    b.HasKey("PedidosAno", "PedidosId", "ProdutosId");

                    b.HasIndex("ProdutosId");

                    b.ToTable("ItensPedidos");
                });

            modelBuilder.Entity("webservice_api.model.ParticulariedadeItemPedido", b =>
                {
                    b.Property<short>("PedidosAno")
                        .HasColumnType("smallint")
                        .HasColumnName("pedidosAno");

                    b.Property<int>("PedidosId")
                        .HasColumnType("int")
                        .HasColumnName("pedidosId");

                    b.Property<int>("ProdutosId")
                        .HasColumnType("int")
                        .HasColumnName("produtosId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Particulariedade")
                        .HasColumnType("text")
                        .HasColumnName("particulariedade");

                    b.HasKey("PedidosAno", "PedidosId", "ProdutosId", "Id");

                    b.ToTable("ParticulariedadeItemPedido", (string)null);
                });

            modelBuilder.Entity("webservice_api.model.Pedido", b =>
                {
                    b.Property<short>("Ano")
                        .HasColumnType("smallint")
                        .HasColumnName("ano");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataSolicitante")
                        .HasColumnType("datetime")
                        .HasColumnName("dataSolicitante");

                    b.Property<int?>("FormaPagamentoId")
                        .HasColumnType("int")
                        .HasColumnName("formaPagamentoId");

                    b.Property<DateTime?>("HorarioRetirada")
                        .HasColumnType("datetime")
                        .HasColumnName("horarioRetirada");

                    b.Property<int?>("UsuarioSolicitante")
                        .HasColumnType("int")
                        .HasColumnName("usuarioSolicitante");

                    b.HasKey("Ano", "Id");

                    b.HasIndex("FormaPagamentoId");

                    b.HasIndex("UsuarioSolicitante");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("webservice_api.model.PrecoProduto", b =>
                {
                    b.Property<int>("ProdutosId")
                        .HasColumnType("int")
                        .HasColumnName("produtosId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataLancamento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataLancamento");

                    b.Property<decimal?>("Preco")
                        .HasColumnType("decimal(10, 5)")
                        .HasColumnName("preco");

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("ProdutosId", "Id");

                    b.HasIndex("UsuarioResponsavel");

                    b.ToTable("PrecoProduto", (string)null);
                });

            modelBuilder.Entity("webservice_api.model.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CaminhoFoto")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("caminhoFoto");

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Situacao")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("situacao")
                        .IsFixedLength();

                    b.Property<int?>("UsuarioResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("usuarioResponsavel");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioResponsavel");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("webservice_api.model.UnidadesMedida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Grandeza")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("grandeza")
                        .IsFixedLength();

                    b.Property<string>("Simbolo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("simbolo");

                    b.Property<string>("Unidade")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unidade");

                    b.HasKey("Id");

                    b.ToTable("UnidadesMedida");
                });

            modelBuilder.Entity("webservice_api.model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("Identificação do usuário");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("date")
                        .HasColumnName("dataNascimento");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Hash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("hash");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Salt")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("salt");

                    b.Property<string>("Sexo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("sexo")
                        .IsFixedLength();

                    b.Property<string>("Tratamento")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tratamento");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("webservice_api.model.Acesso", b =>
                {
                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("Acessos")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_Acessos_Usuarios");

                    b.Navigation("UsuarioResponsavelNavigation");
                });

            modelBuilder.Entity("webservice_api.model.AcessosGrupo", b =>
                {
                    b.HasOne("webservice_api.model.Acesso", "Acessos")
                        .WithMany("AcessosGrupos")
                        .HasForeignKey("AcessosId")
                        .IsRequired()
                        .HasConstraintName("FK_AcessosGrupos_Acessos");

                    b.HasOne("webservice_api.model.Grupo", "Grupos")
                        .WithMany("AcessosGrupos")
                        .HasForeignKey("GruposId")
                        .IsRequired()
                        .HasConstraintName("FK_AcessosGrupos_Grupos");

                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("AcessosGrupos")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_AcessosGrupos_Usuarios");

                    b.Navigation("Acessos");

                    b.Navigation("Grupos");

                    b.Navigation("UsuarioResponsavelNavigation");
                });

            modelBuilder.Entity("webservice_api.model.AcessosUsuario", b =>
                {
                    b.HasOne("webservice_api.model.Acesso", "Acessos")
                        .WithMany("AcessosUsuarios")
                        .HasForeignKey("AcessosId")
                        .IsRequired()
                        .HasConstraintName("FK_AcessosUsuarios_Acessos");

                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("AcessosUsuarioUsuarioResponsavelNavigations")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_AcessosUsuarios_Usuarios1");

                    b.HasOne("webservice_api.model.Usuario", "Usuarios")
                        .WithMany("AcessosUsuarioUsuarios")
                        .HasForeignKey("UsuariosId")
                        .IsRequired()
                        .HasConstraintName("FK_AcessosUsuarios_Usuarios");

                    b.Navigation("Acessos");

                    b.Navigation("UsuarioResponsavelNavigation");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("webservice_api.model.CategoriasProduto", b =>
                {
                    b.HasOne("webservice_api.model.Categoria", "Categorias")
                        .WithMany("CategoriasProdutos")
                        .HasForeignKey("CategoriasId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoriasProdutos_Categorias");

                    b.HasOne("webservice_api.model.Produto", "Produtos")
                        .WithMany("CategoriasProdutos")
                        .HasForeignKey("ProdutosId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoriasProdutos_Produtos");

                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("CategoriasProdutos")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_CategoriasProdutos_Usuarios");

                    b.Navigation("Categorias");

                    b.Navigation("Produtos");

                    b.Navigation("UsuarioResponsavelNavigation");
                });

            modelBuilder.Entity("webservice_api.model.EntradaEstoque", b =>
                {
                    b.HasOne("webservice_api.model.UnidadesMedida", "Unidades")
                        .WithMany("EntradaEstoques")
                        .HasForeignKey("UnidadesId")
                        .HasConstraintName("FK_EntradaEstoque_UnidadesMedida");

                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("EntradaEstoques")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_EntradaEstoque_Usuarios");

                    b.HasOne("webservice_api.model.Estoque", "Estoque")
                        .WithMany("EntradaEstoques")
                        .HasForeignKey("ProdutosId", "EstoqueId")
                        .IsRequired()
                        .HasConstraintName("FK_EntradaEstoque_Estoque");

                    b.Navigation("Estoque");

                    b.Navigation("Unidades");

                    b.Navigation("UsuarioResponsavelNavigation");
                });

            modelBuilder.Entity("webservice_api.model.EstagiosPedido", b =>
                {
                    b.HasOne("webservice_api.model.Estagio", "Estagios")
                        .WithMany("EstagiosPedidos")
                        .HasForeignKey("EstagiosId")
                        .IsRequired()
                        .HasConstraintName("FK_EstagiosPedido_EstagiosPedido");

                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("EstagiosPedidos")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_EstagiosPedido_Usuarios");

                    b.HasOne("webservice_api.model.Pedido", "Pedidos")
                        .WithMany("EstagiosPedidos")
                        .HasForeignKey("PedidosAno", "PedidosId")
                        .IsRequired()
                        .HasConstraintName("FK_EstagiosPedido_Pedidos");

                    b.Navigation("Estagios");

                    b.Navigation("Pedidos");

                    b.Navigation("UsuarioResponsavelNavigation");
                });

            modelBuilder.Entity("webservice_api.model.Estoque", b =>
                {
                    b.HasOne("webservice_api.model.Produto", "Produtos")
                        .WithMany("Estoques")
                        .HasForeignKey("ProdutosId")
                        .IsRequired()
                        .HasConstraintName("FK_Estoque_Produtos");

                    b.HasOne("webservice_api.model.UnidadesMedida", "Unidades")
                        .WithMany("Estoques")
                        .HasForeignKey("UnidadesId")
                        .HasConstraintName("FK_Estoque_UnidadesMedida");

                    b.Navigation("Produtos");

                    b.Navigation("Unidades");
                });

            modelBuilder.Entity("webservice_api.model.Grupo", b =>
                {
                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("Grupos")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_Grupos_Usuarios");

                    b.Navigation("UsuarioResponsavelNavigation");
                });

            modelBuilder.Entity("webservice_api.model.GruposUsuario", b =>
                {
                    b.HasOne("webservice_api.model.Grupo", "Grupos")
                        .WithMany("GruposUsuarios")
                        .HasForeignKey("GruposId")
                        .IsRequired()
                        .HasConstraintName("FK_GruposUsuarios_Grupos");

                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("GruposUsuarioUsuarioResponsavelNavigations")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_GruposUsuarios_Usuarios1");

                    b.HasOne("webservice_api.model.Usuario", "Usuarios")
                        .WithMany("GruposUsuarioUsuarios")
                        .HasForeignKey("UsuariosId")
                        .IsRequired()
                        .HasConstraintName("FK_GruposUsuarios_Usuarios");

                    b.Navigation("Grupos");

                    b.Navigation("UsuarioResponsavelNavigation");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("webservice_api.model.ItensPedido", b =>
                {
                    b.HasOne("webservice_api.model.Produto", "Produtos")
                        .WithMany("ItensPedidos")
                        .HasForeignKey("ProdutosId")
                        .IsRequired()
                        .HasConstraintName("FK_ItensPedidos_Produtos");

                    b.HasOne("webservice_api.model.Pedido", "Pedidos")
                        .WithMany("ItensPedidos")
                        .HasForeignKey("PedidosAno", "PedidosId")
                        .IsRequired()
                        .HasConstraintName("FK_ItensPedidos_ItensPedidos");

                    b.Navigation("Pedidos");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("webservice_api.model.ParticulariedadeItemPedido", b =>
                {
                    b.HasOne("webservice_api.model.ItensPedido", "P")
                        .WithMany("ParticulariedadeItemPedidos")
                        .HasForeignKey("PedidosAno", "PedidosId", "ProdutosId")
                        .IsRequired()
                        .HasConstraintName("FK_ParticulariedadeItemPedido_ItensPedidos");

                    b.Navigation("P");
                });

            modelBuilder.Entity("webservice_api.model.Pedido", b =>
                {
                    b.HasOne("webservice_api.model.FormaPagamento", "FormaPagamento")
                        .WithMany("Pedidos")
                        .HasForeignKey("FormaPagamentoId")
                        .HasConstraintName("FK_Pedidos_Pedidos");

                    b.HasOne("webservice_api.model.Usuario", "UsuarioSolicitanteNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioSolicitante")
                        .HasConstraintName("FK_Pedidos_Usuarios");

                    b.Navigation("FormaPagamento");

                    b.Navigation("UsuarioSolicitanteNavigation");
                });

            modelBuilder.Entity("webservice_api.model.PrecoProduto", b =>
                {
                    b.HasOne("webservice_api.model.Produto", "Produtos")
                        .WithMany("PrecoProdutos")
                        .HasForeignKey("ProdutosId")
                        .IsRequired()
                        .HasConstraintName("FK_PrecoProduto_Produtos");

                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("PrecoProdutos")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_PrecoProduto_Usuarios");

                    b.Navigation("Produtos");

                    b.Navigation("UsuarioResponsavelNavigation");
                });

            modelBuilder.Entity("webservice_api.model.Produto", b =>
                {
                    b.HasOne("webservice_api.model.Usuario", "UsuarioResponsavelNavigation")
                        .WithMany("Produtos")
                        .HasForeignKey("UsuarioResponsavel")
                        .HasConstraintName("FK_Produtos_Usuarios");

                    b.Navigation("UsuarioResponsavelNavigation");
                });

            modelBuilder.Entity("webservice_api.model.Acesso", b =>
                {
                    b.Navigation("AcessosGrupos");

                    b.Navigation("AcessosUsuarios");
                });

            modelBuilder.Entity("webservice_api.model.Categoria", b =>
                {
                    b.Navigation("CategoriasProdutos");
                });

            modelBuilder.Entity("webservice_api.model.Estagio", b =>
                {
                    b.Navigation("EstagiosPedidos");
                });

            modelBuilder.Entity("webservice_api.model.Estoque", b =>
                {
                    b.Navigation("EntradaEstoques");
                });

            modelBuilder.Entity("webservice_api.model.FormaPagamento", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("webservice_api.model.Grupo", b =>
                {
                    b.Navigation("AcessosGrupos");

                    b.Navigation("GruposUsuarios");
                });

            modelBuilder.Entity("webservice_api.model.ItensPedido", b =>
                {
                    b.Navigation("ParticulariedadeItemPedidos");
                });

            modelBuilder.Entity("webservice_api.model.Pedido", b =>
                {
                    b.Navigation("EstagiosPedidos");

                    b.Navigation("ItensPedidos");
                });

            modelBuilder.Entity("webservice_api.model.Produto", b =>
                {
                    b.Navigation("CategoriasProdutos");

                    b.Navigation("Estoques");

                    b.Navigation("ItensPedidos");

                    b.Navigation("PrecoProdutos");
                });

            modelBuilder.Entity("webservice_api.model.UnidadesMedida", b =>
                {
                    b.Navigation("EntradaEstoques");

                    b.Navigation("Estoques");
                });

            modelBuilder.Entity("webservice_api.model.Usuario", b =>
                {
                    b.Navigation("Acessos");

                    b.Navigation("AcessosGrupos");

                    b.Navigation("AcessosUsuarioUsuarioResponsavelNavigations");

                    b.Navigation("AcessosUsuarioUsuarios");

                    b.Navigation("CategoriasProdutos");

                    b.Navigation("EntradaEstoques");

                    b.Navigation("EstagiosPedidos");

                    b.Navigation("Grupos");

                    b.Navigation("GruposUsuarioUsuarioResponsavelNavigations");

                    b.Navigation("GruposUsuarioUsuarios");

                    b.Navigation("Pedidos");

                    b.Navigation("PrecoProdutos");

                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
